---
title: "HW3-drafting-viz"
author: Hannah Irish
editor: visual
format:
  html:
    embed-resources: true
editor_options: 
  chunk_output_type: console
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(warning = FALSE, message = FALSE)

```

Load packages and fonts

```{r}
## Include necessary packages
library(showtext)
library(tidyverse)
library(sf)
library(fmsb)
library(ggrepel)
library(usmap)

##Add typeface "Inter" from Google Fonts
font_add_google(name = "Inter", family = "inter")
##Add typeface "Barlow" from Google Fonts
font_add_google(name = "Barlow", family="barlow")

## enable use of Google Fonts
showtext_auto()
```

## HW 3: Preparing For Final Assignment

1.  I plan to pursue option #2 for HW4, the infographic option.
2.  My overarching question is how U.S. homes' census region contributes to their energy insecurity in 2020. My sub-questions are a) How many homes are in each region, b) Which census regions are most prone to energy insecurity, and c) Which energy insecurity indicators dominate each region
3.  The energy insecurity section of the Residential Energy Consumption Survey (RECS) from the U.S. Energy Information Administration (EIA) has many demographic/household characteristics. They show the number of households in the U.S. that report each energy indicator (any indicator, forgoing food/medicine, leaving home at unhealthy temperature, unable to use AC, unable to use heat, receiving a disconnect or delivery stop notice) by each of these factors. I will specifically utilize the census data and look at location-specific energy insecurity survey reports. This is all for 2020, the most recent survey year.

## Hand-Drawn Plan

I did this on my iPad but it is hand drawn!

First, a map showing the different census regions with their total households to give context to the data:

```{r}

#| eval: true
#| echo: false
#| fig-align: "center"
#| out-width: "100%"
#| fig-alt: "Drawing of the United States with colors labeling census regions and each region labelled with its name and the number of homes it contains. The South Atlantic region (Florida, Georgia, South Carolina, North Carolina, Virginia, West Virginia, Maryland) has the most households while New England (Connecticut, Rhode Island, Massachussetts, New Hampshire, Vermont, and Maine) has the fewest households "
knitr::include_graphics(here::here("images/viz1_graph.png"))
```

Second, a polar bar graph showing the percent of homes in each region experiencing any energy insecurity:

```{r}

#| eval: true
#| echo: false
#| fig-align: "center"
#| out-width: "100%"
#| fig-alt: "A polar bar chart/pie graph showing the percent of homes in each census region experiencing energy insecurity. Pacific has the most, whereas the Middle Atlantic has the least"
knitr::include_graphics(here::here("images/viz2_polarbar.png"))

```

Finally, a collection of radar graphs showing the relative dominance of each energy indicator in each region

```{r}

#| eval: true
#| echo: false
#| fig-align: "center"
#| out-width: "100%"
#| fig-alt: "4 radar graphs showing each general census region with the specific regions highlighted, showing which energy insecurity indicators are most prevalent in each region "
knitr::include_graphics(here::here("images/viz3_radars.png"))
```

## Read in data

```{r}

##read in census_data that was wrangled for HW2 and save it as dataframe "census_nrg" 
census_nrg <- read_csv(here::here("data_intermediate/census_data.csv"))

##make new data frame that just has "any insecurity" aka the sum of all the specific indicators
census_any <- census_nrg %>% 
  filter(indicator == "any_insecurity")
  
##set order for the regions so I can keep the red and green ones apart later
specific_region_order <- c( "East North Central", "West North Central", "Pacific", "Mountain","South Atlantic" , "East South Central", "West South Central" , "New England", "Middle Atlantic")

##order the regions
census_any$specific_region <- factor(census_any$specific_region, levels = specific_region_order)

##determine certain colors for each region so I only need to edit it here later
color_pacific = "springgreen4"
color_mountain = "#93C572"
color_wnc = "#FAC898"
color_enc = "#FFA500"
color_ne = '#D22B2B'
color_ma = "#FAA0A0"
color_sa = "#0F52BA"
color_esc = "#6495ED"
color_wsc ="#87CEEB"

##create a color palette for each of the specific census regions
region_palette <- c("Pacific" = color_pacific, "Mountain" = color_mountain, "West North Central" = color_wnc, "East North Central" = color_enc, "New England" = color_ne, "Middle Atlantic" = color_ma, "South Atlantic" = color_sa, "East South Central" = color_esc, "West South Central" = color_wsc)
```

Read in Data and Prepare

```{r}


##read in shapefile of the US states
states <- read_sf(here::here("data/states/US_State_Boundaries.shp")) %>% 
  ##put variable names in lowercase_snake
  janitor::clean_names() %>% 
  ## select only the fid, state abbreviation, and the geometry
  select(1,4, 17) 

states <- st_transform(states, crs = 3857)

##make l ist of which abbreviations go with each census region
pac_list <- c("AK", "HI", "WA", "CA", "OR")
mountain_list <- c("MT", "ID", "WY", "NV", "UT", "CO", "AZ", "NM")
wnc_list <- c("ND", "SD", "NE", "KS", "MN", "IA", "MO")
enc_list <- c("WI", "IL", "IN", "MI", "OH")
new_england_list <- c("CT", "MA", "RI", "NH", "VT", "ME")
mid_atlantic_list <- c("PA", "NJ", "NY")
wsc_list <- c("TX", "OK", "AR", "LA")
esc_list <- c("KY", "TN", "MS", "AL")
s_atlantic_list <- c("DE", "DC", "MD", "NC", "VA", "WV", "GA", "FL", "SC")

##mutate so that the region goes with the appropriate states
states <- states %>% 
mutate(specific_region = case_when(
    state_abbr %in% pac_list ~ "Pacific",
    state_abbr %in% mountain_list ~ "Mountain",
    state_abbr %in% wnc_list ~ "West North Central",
    state_abbr %in% enc_list ~ "East North Central",
    state_abbr %in% new_england_list ~ "New England",
    state_abbr %in% mid_atlantic_list ~ "Middle Atlantic",
    state_abbr %in% wsc_list ~ "West South Central",
    state_abbr %in% esc_list ~ "East South Central",
    state_abbr %in% s_atlantic_list ~ "South Atlantic",
    TRUE ~ "Other"  # Default value if none of the conditions are met
  )) %>% 
  filter(!state_abbr %in% c("HI","AK", "PR", "VI")) 


west_sf <- states %>% 
  filter(specific_region == "Pacific")

##prepare data for map -- each region and their number of homes
n_homes_map <- census_nrg %>% 
  filter(indicator == "any_insecurity") %>% 
  select(specific_region, total_us)

##join the number of homes with the spatial data
states <- left_join(states, n_homes_map, by = "specific_region") 


states <- states %>% 
  mutate(total_us = paste(total_us, "Million"))

```

Preparing labels. I'm going to get the centroid of each region so I can place labels. I'm also going to make a point slightly off from the first label so I can have 2!

```{r}
##set how much I'm going to offset one of the labels
jitter_y <- 200000
```

Mountain region

```{r}

##MOUNTAIN 

##filter the whole US by just the mountain region but exclude Alaska and Hawaii 
mount_lab <- states %>% 
  filter(state_abbr %in% mountain_list) 

# create a new data frame for the merged geometry 
merged_mount <- data.frame(specific_region = mount_lab$specific_region[1],
                         total_us = mount_lab$total_us[1])

## make a simple features object
merged_mount_sf <- st_as_sf(merged_mount, geometry = st_union(mount_lab), crs = 3857)

## Get the centroid for the # of homes
mount_centroid_n <- merged_mount_sf %>% 
  st_centroid(merged_mount_sf) 

## get the coordinates to adjust the y one
mount_cord <- st_coordinates(mount_centroid_n)

## change the latitiude by the jitter amount
mount_cord[2] = mount_cord[2] + jitter_y

## make a new df with the appropriate lat and long
merged_mount <- merged_mount %>% 
  mutate("Lat" = mount_cord[1], "Long" = mount_cord[2])

## get new sf 
mount_centroid_name <- st_as_sf(merged_mount, coords = c("Lat", "Long"),crs = 3857)


```

And for West North Central

```{r}

##WEST NORTH CENTRAL 

##filter the whole US by just the wnc region
wnc_lab <- states %>% 
  filter(state_abbr %in% wnc_list) 

# create a new data frame for the merged geometry 
merged_wnc <- data.frame(specific_region = wnc_lab$specific_region[1],
                         total_us = wnc_lab$total_us[1])

## make a simple features object
merged_wnc_sf <- st_as_sf(merged_wnc, geometry = st_union(wnc_lab), crs = 3857)

## Get the centroid for the # of homes
wnc_centroid_n <- merged_wnc_sf %>% 
  st_centroid(merged_wnc_sf) 

## get the coordinates to adjust the y one
wnc_cord <- st_coordinates(wnc_centroid_n)

## change the latitiude by the jitter amount
wnc_cord[2] = wnc_cord[2] + jitter_y

## make a new df with the appropriate lat and long
merged_wnc <- merged_wnc %>% 
  mutate("Lat" = wnc_cord[1], "Long" = wnc_cord[2])

## get new sf 
wnc_centroid_name <- st_as_sf(merged_wnc, coords = c("Lat", "Long"),crs = 3857)



```

And for East North Central

```{r}
##EAST NORTH CENTRAL 

##filter the whole US by just the wnc region
enc_lab <- states %>% 
  filter(state_abbr %in% enc_list) 

# create a new data frame for the merged geometry 
merged_enc <- data.frame(specific_region = enc_lab$specific_region[1],
                         total_us = enc_lab$total_us[1])

## make a simple features object
merged_enc_sf <- st_as_sf(merged_enc, geometry = st_union(enc_lab), crs = 3857)

## Get the centroid for the # of homes
enc_centroid_n <- merged_enc_sf %>% 
  st_centroid(merged_enc_sf) 

## get the coordinates to adjust the y one
enc_cord <- st_coordinates(enc_centroid_n)

## change the latitiude by the jitter amount
enc_cord[2] = enc_cord[2] + jitter_y

## make a new df with the appropriate lat and long
merged_enc <- merged_enc %>% 
  mutate("Lat" = enc_cord[1], "Long" = enc_cord[2])

## get new sf 
enc_centroid_name <- st_as_sf(merged_enc, coords = c("Lat", "Long"),crs = 3857)

```

Middle atlantic

```{r}
##MID ATLANTIC

##filter the whole US by just the wnc region
ma_lab <- states %>% 
  filter(state_abbr %in% mid_atlantic_list) 

# create a new data frame for the merged geometry 
merged_ma <- data.frame(specific_region = ma_lab$specific_region[1],
                         total_us = ma_lab$total_us[1])

## make a simple features object
merged_ma_sf <- st_as_sf(merged_ma, geometry = st_union(ma_lab), crs = 3857)

## Get the centroid for the # of homes
ma_centroid_n <- merged_ma_sf %>% 
  st_centroid(merged_ma_sf) 

## get the coordinates to adjust the y one
ma_cord <- st_coordinates(ma_centroid_n)

## change the latitiude by the jitter amount
ma_cord[2] = ma_cord[2] + jitter_y

## make a new df with the appropriate lat and long
merged_ma <- merged_ma %>% 
  mutate("Lat" = ma_cord[1], "Long" = ma_cord[2])

## get new sf 
ma_centroid_name <- st_as_sf(merged_ma, coords = c("Lat", "Long"),crs = 3857)
```

New England

```{r}
##NEW ENGLAND

##filter the whole US by just the wnc region
ne_lab <- states %>% 
  filter(state_abbr %in% new_england_list) 

# create a new data frame for the merged geometry 
merged_ne <- data.frame(specific_region = ne_lab$specific_region[1],
                         total_us = ne_lab$total_us[1])

## make a simple features object
merged_ne_sf <- st_as_sf(merged_ne, geometry = st_union(ne_lab), crs = 3857)

## Get the centroid for the # of homes
ne_centroid_n <- merged_ne_sf %>% 
  st_centroid(merged_ne_sf) 

## get the coordinates to adjust the y one
ne_cord <- st_coordinates(ne_centroid_n)

## change the latitiude by the jitter amount
ne_cord[2] = ne_cord[2] + jitter_y

## make a new df with the appropriate lat and long
merged_ne <- merged_ne %>% 
  mutate("Lat" = ne_cord[1], "Long" = ne_cord[2])

## get new sf 
ne_centroid_name <- st_as_sf(merged_ne, coords = c("Lat", "Long"),crs = 3857)
```

West South Central

```{r}
##WEST SOUTH CENTRAL

##filter the whole US by just the wsc region
wsc_lab <- states %>% 
  filter(state_abbr %in% wsc_list) 

# create a new data frame for the merged geometry 
merged_wsc <- data.frame(specific_region = wsc_lab$specific_region[1],
                         total_us = wsc_lab$total_us[1])

## make a simple features object
merged_wsc_sf <- st_as_sf(merged_wsc, geometry = st_union(wsc_lab), crs = 3857)

## Get the centroid for the # of homes
wsc_centroid_n <- merged_wsc_sf %>% 
  st_centroid(merged_wsc_sf) 

## get the coordinates to adjust the y one
wsc_cord <- st_coordinates(wsc_centroid_n)

## change the latitiude by the jitter amount
wsc_cord[2] = wsc_cord[2] + jitter_y

## make a new df with the appropriate lat and long
merged_wsc <- merged_wsc %>% 
  mutate("Lat" = wsc_cord[1], "Long" = wsc_cord[2])

## get new sf 
wsc_centroid_name <- st_as_sf(merged_wsc, coords = c("Lat", "Long"),crs = 3857)
```

East South Central

```{r}

##EAST SOUTH CENTRAL

##filter the whole US by just the wsc region
esc_lab <- states %>% 
  filter(state_abbr %in% esc_list) 

# create a new data frame for the merged geometry 
merged_esc <- data.frame(specific_region = esc_lab$specific_region[1],
                         total_us = esc_lab$total_us[1])

## make a simple features object
merged_esc_sf <- st_as_sf(merged_esc, geometry = st_union(esc_lab), crs = 3857)

## Get the centroid for the # of homes
esc_centroid_n <- merged_esc_sf %>% 
  st_centroid(merged_esc_sf) 

## get the coordinates to adjust the y one
esc_cord <- st_coordinates(esc_centroid_n)

## change the latitiude by the jitter amount
esc_cord[2] = esc_cord[2] + jitter_y

## make a new df with the appropriate lat and long
merged_esc <- merged_esc %>% 
  mutate("Lat" = esc_cord[1], "Long" = esc_cord[2])

## get new sf 
esc_centroid_name <- st_as_sf(merged_esc, coords = c("Lat", "Long"),crs = 3857)
```

South Atlantic

```{r}

##South Atlantic

##filter the whole US by just the sa region
sa_lab <- states %>% 
  filter(state_abbr %in% s_atlantic_list) 

# create a new data frame for the merged geometry 
merged_sa <- data.frame(specific_region = sa_lab$specific_region[1],
                         total_us = sa_lab$total_us[1])

## make a simple features object
merged_sa_sf <- st_as_sf(merged_sa, geometry = st_union(sa_lab), crs = 3857)

## Get the centroid for the # of homes
sa_centroid_n <- merged_sa_sf %>% 
  st_centroid(merged_sa_sf) 

## get the coordinates to adjust the y one
sa_cord <- st_coordinates(sa_centroid_n)

## change the latitiude by the jitter amount
sa_cord[2] = sa_cord[2] - jitter_y

## make a new df with the appropriate lat and long
merged_sa <- merged_sa %>% 
  mutate("Lat" = sa_cord[1], "Long" = sa_cord[2])

## get new sf 
sa_centroid_name <- st_as_sf(merged_sa, coords = c("Lat", "Long"),crs = 3857)
```

Plot map

```{r}

##set a label size so it'll change for all of them
size_label <- 5
size_sub_label <- 4


# plot map
ggplot(states) +
  ##add states data and set the outline/"color" as black and the color inside as the specific region
  geom_sf(data = states, aes(fill = specific_region), color = "gray44",linetype = "dotted", show.legend = FALSE) +
  geom_sf(data=merged_pac_sf, fill = "transparent", color = "black")+
   geom_sf(data=merged_mount_sf, fill = "transparent", color = "black")+
  geom_sf(data=merged_wnc_sf, fill = "transparent", color = "black")+
  geom_sf(data=merged_enc_sf, fill = "transparent", color = "black")+
  geom_sf(data=merged_ma_sf, fill = "transparent", color = "black")+
  geom_sf(data=merged_ne_sf, fill = "transparent", color = "black")+
  geom_sf(data=merged_wsc_sf, fill = "transparent", color = "black")+
  geom_sf(data=merged_esc_sf, fill = "transparent", color = "black")+
  geom_sf(data=merged_sa_sf, fill = "transparent", color = "black")+
  ##PACIFIC
      geom_sf_label(data = pac_centroid_name, aes(label = specific_region),
                size = size_label,
                fontface = "bold",
                color = color_pacific,
                fill = "white",
                show.legend = FALSE) +
   geom_sf_label(data = pac_centroid_n, aes(label = total_us),
                size = size_sub_label,
                position = "jitter",
                fontface = "bold",
                color = color_pacific,
                fill = "white",
                show.legend = FALSE) +

  ##MOUNTAIN
      geom_sf_label(data = mount_centroid_name, aes(label = specific_region),
                size = size_label,
                fontface = "bold",
                color = color_mountain,
                fill = "white",
                show.legend = FALSE) +
   geom_sf_label(data = mount_centroid_n, aes(label = total_us),
                size = size_sub_label,
                position = "jitter",
                fontface = "bold",
                color = color_mountain,
                fill = "white",
                show.legend = FALSE) +
  ##WNC
      geom_sf_label(data = wnc_centroid_name, aes(label = specific_region),
                size = size_label,
                fontface = "bold",
                color = color_wnc,
                fill = "white",
                show.legend = FALSE) +
   geom_sf_label(data = wnc_centroid_n, aes(label = total_us),
                size = size_sub_label,
                position = "jitter",
                fontface = "bold",
                color = color_wnc,
                fill = "white",
                show.legend = FALSE) +
  ##ENC
      geom_sf_label(data = enc_centroid_name, aes(label = specific_region),
                size = size_label,
                fontface = "bold",
                color = color_enc,
                fill = "white",
                show.legend = FALSE) +
   geom_sf_label(data = enc_centroid_n, aes(label = total_us),
                size = size_sub_label,
                position = "jitter",
                fontface = "bold",
                color = color_enc,
                fill = "white",
                show.legend = FALSE) +
  ##New England
      geom_sf_label(data = ne_centroid_name, aes(label = specific_region),
                size = size_label,
                fontface = "bold",
                color = color_ne,
                fill = "white",
                show.legend = FALSE) +
   geom_sf_label(data = ne_centroid_n, aes(label = total_us),
                size = size_sub_label,
                position = "jitter",
                fontface = "bold",
                color = color_ne,
                fill = "white",
                show.legend = FALSE) +
  ##Mid Atlantic
      geom_sf_label(data = ma_centroid_name, aes(label = specific_region),
                size = size_label,
                fontface = "bold",
                color = color_ma,
                fill = "white",
                show.legend = FALSE) +
   geom_sf_label(data = ma_centroid_n, aes(label = total_us),
                size = size_sub_label,
                position = "jitter",
                fontface = "bold",
                color = color_ma,
                fill = "white",
                show.legend = FALSE) +
  ##West South Central
      geom_sf_label(data = wsc_centroid_name, aes(label = specific_region),
                size = size_label,
                fontface = "bold",
                color = color_wsc,
                fill = "white",
                show.legend = FALSE) +
   geom_sf_label(data = wsc_centroid_n, aes(label = total_us),
                size = size_sub_label,
                position = "jitter",
                fontface = "bold",
                color = color_wsc,
                fill = "white",
                show.legend = FALSE) +
  ##East South Central
      geom_sf_label(data = esc_centroid_name, aes(label = specific_region),
                size = size_label,
                fontface = "bold",
                color = color_esc,
                fill = "white",
                show.legend = FALSE) +
   geom_sf_label(data = esc_centroid_n, aes(label = total_us),
                size = size_sub_label,
                position = "jitter",
                fontface = "bold",
                color = color_esc,
                fill = "white",
                show.legend = FALSE) +
  ##South Atlantic
      geom_sf_label(data = sa_centroid_name, aes(label = total_us),
                size = size_sub_label,
                fontface = "bold",
                color = color_sa,
                fill = "white",
                show.legend = FALSE) +
   geom_sf_label(data = sa_centroid_n, aes(label = specific_region),
                size = size_label,
                position = "jitter",
                fontface = "bold",
                color = color_sa,
                fill = "white",
                show.legend = FALSE) +
  labs(title = "US Census Regions",
       subtitle = "Location and Number of Homes")+ 
   scale_fill_manual(values = region_palette) +
   theme_void() +
  theme(
     plot.title = element_text(face="bold",
                              family = "inter",
                              size = 25,
                              hjust = 0.5),
     plot.subtitle = element_text(
                              family = "inter",
                              size = 20,
                              hjust = 0.5)
     )
  
  

```

Polar bar plot

```{r}

##make a position for the labels so I can move them around
census_any$label_position <- (census_any$pct / 1.65) 

##make a bar plot containing the percent of homes in each region experiencing any insecurity 
ggplot(data=census_any, aes(x=specific_region, y=pct, fill=specific_region))+
  geom_bar(stat="identity") +
  ##label the percentages
  geom_text(aes(label=scales::percent(pct, accuracy = 1), y=label_position), size = 6, color="white", fontface = "bold")+
  labs(x="", y="", 
       title="Percent of Homes Reporting ANY Energy Insecurity (2020)",
       size = "",
       subtitle = "By Census Region",
       fill = "General Census Region")+
  ##apply my custom color palette
    scale_fill_manual(values = region_palette) +
  ##remove gridlines, axes labels, etc with theme_void
  theme_void() +
  theme(
    ##adjust appearance of all text
    axis.text =  element_blank(),
     plot.title = element_text(face="bold",
                              family = "inter",
                              size = 25, 
                              hjust=0.2,
                              vjust=-5),
    plot.subtitle = element_text(face = "italic",
                                 family="inter",
                                 size = 20,
                                 vjust = -6,
                                 hjust=0.2),
    legend.title = element_text(face = "bold",
                                 family="inter",
                                 size = 15),
    legend.text = element_text(family="inter",
                                 size = 15),
    legend.position = "none"
  
  )  +
  ##add lines from the labels to the chart segments
  geom_segment(aes(x = specific_region, y = pct, xend = specific_region, yend = pct+0.08), 
               color = "black", size = 0.7)+
  geom_text(data=census_any,
  aes(x = specific_region, y = pct, label = specific_region),
  position = position_stack(vjust = 1.55), # Adjust 'vjust' for label positioning
  size = 6,
  colour = "black",
  family="inter"# White text color
) +
  ##make a circle instead of traditional bar chart
  coord_polar(start=0)
```

## Radar Chart

Prep for radarcharts:

```{r}

##make vector of indicator names to use later
indicator_vector <- c("Forgo Food/Medicine", "Leave Home at Unhealthy Temp", "Receive a Disconnect/Stop Delivery Notice", "Unable to Use Heat", "Unable to use AC")


##find the average pct of homes experiencing each insecurity and make a data frame suitable for a radar plot
avg_all <- census_nrg %>% 
  group_by(indicator) %>% 
  summarize(pct = mean(pct)) %>% 
  filter(indicator != "any_insecurity") %>% 
  pivot_wider(names_from = "indicator", values_from = "pct") %>% 
  select(food_medicine, unhealthy_temp, disconnect_stop, unable_heat, unable_ac)

##set the rowname to identify which is the average later
row.names(avg_all) = "average"

##choose the maximum amount of homes to show scale for the plots
max_scale_n = 0.35




```

Northeast Radar Chart

```{r}

##make radar data for the northeast
radar_northeast <- census_nrg %>% 
  filter(general_region == "Northeast") %>% 
  filter(indicator != "any_insecurity") %>% 
  select(pct, indicator, specific_region) %>% 
  pivot_wider(values_from = "pct", names_from = "indicator", id_cols = "specific_region") %>% 
  select(-specific_region) 

##set row names to specific regions
row.names(radar_northeast) = c("New England", "Middle Atlantic")
 
##bind with the min and max values and average to plot
radar_northeast <- rbind(rep(max_scale_n, 6), rep(0,6), avg_all, radar_northeast)


##make northeast radar plot
radarchart(radar_northeast, 
           pcol =c("gray50",color_ne,color_ma), 
           pfcol = c(scales::alpha(c("gray50",color_ne,color_ma), 0.2)),  
            vlabels=indicator_vector)
  

```

Midwest Radar Chart

```{r}


##repeat above chunk exactly but for midwest:


radar_midwest <- census_nrg %>% 
  filter(general_region == "Midwest") %>% 
  filter(indicator != "any_insecurity") %>% 
  select(pct, indicator, specific_region) %>% 
  pivot_wider(values_from = "pct", names_from = "indicator", id_cols = "specific_region") %>% 
  select(-specific_region) 

row.names(radar_midwest) = c("East North Central", "West North Central")
 
radar_midwest <- rbind(rep(max_scale_n, 6), rep(0,6), avg_all, radar_midwest)

radarchart(radar_midwest, 
           pcol =c("gray50",color_enc,color_wnc), 
           pfcol = c(scales::alpha(c("gray50",color_enc,color_wnc), 0.2)),  
            vlabels=indicator_vector)
  
```

West Radar Chart

```{r}

## repeat above exactly except for West
radar_west <- census_nrg %>% 
  filter(general_region == "West") %>% 
  filter(indicator != "any_insecurity") %>% 
  select(pct, indicator, specific_region) %>% 
  pivot_wider(values_from = "pct", names_from = "indicator", id_cols = "specific_region") %>% 
  select(-specific_region) 

row.names(radar_west) = c("Mountain", "Pacific")
 
radar_west <- rbind(rep(max_scale_n, 6), rep(0,6), avg_all, radar_west)

radarchart(radar_west, 
           pcol =c("gray50",color_mountain,color_pacific), 
           pfcol = c(scales::alpha(c("gray50",color_mountain,color_pacific), 0.2)),  
            vlabels=indicator_vector)
```

South Radar Chart

```{r}


##repeat above exactly but for south
radar_south <- census_nrg %>% 
  filter(general_region == "South") %>% 
  filter(indicator != "any_insecurity") %>% 
  select(pct, indicator, specific_region) %>% 
  pivot_wider(values_from = "pct", names_from = "indicator", id_cols = "specific_region") %>% 
  select(-specific_region)

row.names(radar_south) = c("South Atlantic", "East South Central", "West South Central")
 
radar_south <- rbind(rep(max_scale_n, 6), rep(0,6), avg_all, radar_south)

radarchart(radar_south, 
           pcol =c("gray50",color_sa,color_esc, color_wsc), 
           pfcol = c(scales::alpha(c("gray50",color_sa,color_esc, color_wsc), 0.2)),  
            vlabels=indicator_vector)

```

Radar Overall

```{r}

##make data frame summing up only the food/medicine category
census_all_fm <- census_nrg %>% 
  filter(indicator == "food_medicine") %>% 
  group_by(specific_region) %>% 
    summarise(across(c(total_us, n_homes), sum, na.rm = TRUE))

##calculate percent of homes with food/medicine insecurity
all_fm <- sum(census_all_fm$n_homes)/sum(census_all_fm$total_us)


##make data frame summing up only the unhealthy temp category
census_all_temp <- census_nrg %>% 
  filter(indicator == "unhealthy_temp") %>% 
  group_by(specific_region) %>% 
    summarise(across(c(total_us, n_homes), sum, na.rm = TRUE))

##calculate percent of homes with unhealthy temp insecurity
all_temp <- sum(census_all_temp$n_homes)/sum(census_all_temp$total_us)

##make data frame summing up only the disconnect/stop category
census_all_stop <- census_nrg %>% 
  filter(indicator == "disconnect_stop") %>% 
  group_by(specific_region) %>% 
    summarise(across(c(total_us, n_homes), sum, na.rm = TRUE))

##calculate percent of homes with disconnect/stopinsecurity
all_stop <- sum(census_all_stop$n_homes)/sum(census_all_stop$total_us)

##make data frame summing up only the unable to heat category
census_all_heat<- census_nrg %>% 
  filter(indicator == "unable_heat") %>% 
  group_by(specific_region) %>% 
    summarise(across(c(total_us, n_homes), sum, na.rm = TRUE))

##calculate percent of homes with unable to heat insecurity
all_heat <- sum(census_all_heat$n_homes)/sum(census_all_heat$total_us)


##make data frame summing up only the unable to cool category
census_all_cool<- census_nrg %>% 
  filter(indicator == "unable_heat") %>% 
  group_by(specific_region) %>% 
    summarise(across(c(total_us, n_homes), sum, na.rm = TRUE))

##calculate percent of homes with unable to cool insecurity
all_cool <- sum(census_all_cool$n_homes)/sum(census_all_cool$total_us)


all_radar_data <- data.frame("food_medicine" = all_fm,
                             "unhealthy_temp" = all_temp,
                             "disconnect_stop" = all_stop,
                             "unable_heat" = all_heat,
                             "unable_cool" = all_cool
                             )


radar_all <- rbind(rep(max_scale_n, 5), rep(0,5), all_radar_data)

radarchart(radar_all, 
           pcol ="gray50", 
           pfcol = c(scales::alpha("gray50", 0.2)),  
            vlabels=indicator_vector)

```

## Reflection Questions

1.  A challenge I've encountered is I was imagining doing a radar plot for each of the general census regions showing the specific region's percent of homes for each energy indicator, but they all pretty much have the same highest and lowest and there's not a lot of difference in the number region to region, so I feel like it doesn't show much. I also made one at the end that just shows which indicators are most prevalent as this is all I'm getting from the other anyway. Perhaps I could do facet wrapped dumbell plots instead of radars for each region to show their difference from the average? I'm not sure it's worth exploring with that little variation, however.
2.  I used radarchart() from fmsb package to make my radars. This is new and I'm still figuring out really how to do the labelling because it's much less intuitive than ggplot. For now just getting them plotted and customized and rendered is my win. I will customize the look and theme, etc. going forward.
3.  If my radar charts don't really work out, I feel like i need to figure something else that I can do, so if you are looking through this and think context needs to be provided by a certain figure, letting me know would be great. I'm going to try to include the number of homes on the map instead of in a bar plot but I need to figure out how to do that. I am thinking of my question from the context of if we electrify for the climate will we have issues, and I do have data on the main heating fuel used in each region, and the south which has the most energy insecurity does rely on electricity more than gas, so I could include that!
